{"ast":null,"code":"const handleSend = async () => {\n  try {\n    const response = await fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: input || transcript\n      })\n    });\n    s;\n    if (!response.ok) throw new Error(\"Network response was not ok\");\n    const data = await response.json();\n    setMessages([...messages, {\n      text: data.response,\n      sender: \"bot\"\n    }]);\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};","map":{"version":3,"names":["handleSend","response","fetch","method","headers","body","JSON","stringify","message","input","transcript","s","ok","Error","data","json","setMessages","messages","text","sender","error","console"],"sources":["C:/Users/My/Desktop/chatbot/frontend/chatbot-frontend/src/App.js"],"sourcesContent":["const handleSend = async () => {\n  try {\n      const response = await fetch(\"http://localhost:5000/chat\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ message: input || transcript }),\n      });\n      s\n      if (!response.ok) throw new Error(\"Network response was not ok\");\n      \n      const data = await response.json();\n      setMessages([...messages, { text: data.response, sender: \"bot\" }]);\n  } catch (error) {\n      console.error(\"Error:\", error);\n  }\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MACvDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAEC,KAAK,IAAIC;MAAW,CAAC;IACzD,CAAC,CAAC;IACFC,CAAC;IACD,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAEhE,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClCC,WAAW,CAAC,CAAC,GAAGC,QAAQ,EAAE;MAAEC,IAAI,EAAEJ,IAAI,CAACb,QAAQ;MAAEkB,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}