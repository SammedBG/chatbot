{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\My\\\\Desktop\\\\chatbot\\\\frontend\\\\chatbot-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [listening, setListening] = useState(false);\n  const handleSend = async () => {\n    if (input.trim()) {\n      setMessages([...messages, {\n        sender: \"User\",\n        text: input\n      }]);\n      setInput(\"\");\n      try {\n        const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            message: input\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"Bot\",\n          text: data.response\n        }]);\n        speak(data.response);\n      } catch (error) {\n        console.error(\"Error communicating with backend:\", error.message);\n        setMessages(prevMessages => [...prevMessages, {\n          sender: \"Bot\",\n          text: \"Error: Unable to fetch response. Please try again later.\"\n        }]);\n      }\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      handleSend();\n    }\n  };\n  const startListening = () => {\n    if (!(\"webkitSpeechRecognition\" in window)) {\n      alert(\"Speech recognition not supported in this browser!\");\n      return;\n    }\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n      setListening(false);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n      setListening(false);\n    };\n    setListening(true);\n    recognition.start();\n  };\n  const speak = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      maxWidth: \"600px\",\n      margin: \"auto\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        padding: \"15px\",\n        height: \"400px\",\n        overflowY: \"auto\",\n        marginBottom: \"20px\"\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"10px\",\n          textAlign: message.sender === \"User\" ? \"right\" : \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), \" \", message.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message\",\n        style: {\n          flex: \"1\",\n          padding: \"10px\",\n          borderRadius: \"4px\",\n          border: \"1px solid #ccc\",\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        style: {\n          padding: \"10px 20px\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        style: {\n          padding: \"10px\",\n          marginLeft: \"10px\",\n          backgroundColor: listening ? \"lightcoral\" : \"lightblue\"\n        },\n        children: [\"\\uD83C\\uDFA4 \", listening ? \"Listening...\" : \"Voice\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"H5saEQhRZX9pmys8x/2xOORPsLw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","messages","setMessages","input","setInput","listening","setListening","handleSend","trim","sender","text","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","data","json","prevMessages","speak","error","console","handleKeyPress","event","key","startListening","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","onresult","transcript","results","onerror","start","utterance","SpeechSynthesisUtterance","speechSynthesis","style","padding","maxWidth","margin","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","border","borderRadius","height","overflowY","marginBottom","map","index","textAlign","display","alignItems","type","value","onChange","e","target","onKeyPress","placeholder","flex","marginRight","onClick","marginLeft","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/My/Desktop/chatbot/frontend/chatbot-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const [listening, setListening] = useState(false);\n\n    const handleSend = async () => {\n        if (input.trim()) {\n            setMessages([...messages, { sender: \"User\", text: input }]);\n            setInput(\"\");\n\n            try {\n                const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n                    method: \"POST\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify({ message: input }),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n\n                const data = await response.json();\n                setMessages((prevMessages) => [\n                    ...prevMessages,\n                    { sender: \"Bot\", text: data.response },\n                ]);\n                speak(data.response);\n            } catch (error) {\n                console.error(\"Error communicating with backend:\", error.message);\n                setMessages((prevMessages) => [\n                    ...prevMessages,\n                    { sender: \"Bot\", text: \"Error: Unable to fetch response. Please try again later.\" },\n                ]);\n            }\n        }\n    };\n\n    const handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            handleSend();\n        }\n    };\n\n    const startListening = () => {\n        if (!(\"webkitSpeechRecognition\" in window)) {\n            alert(\"Speech recognition not supported in this browser!\");\n            return;\n        }\n\n        const recognition = new window.webkitSpeechRecognition();\n        recognition.lang = \"en-US\";\n        recognition.interimResults = false;\n\n        recognition.onresult = (event) => {\n            const transcript = event.results[0][0].transcript;\n            setInput(transcript);\n            setListening(false);\n        };\n\n        recognition.onerror = (event) => {\n            console.error(\"Speech recognition error:\", event.error);\n            setListening(false);\n        };\n\n        setListening(true);\n        recognition.start();\n    };\n\n    const speak = (text) => {\n        const utterance = new SpeechSynthesisUtterance(text);\n        window.speechSynthesis.speak(utterance);\n    };\n\n    return (\n        <div style={{ padding: \"20px\", maxWidth: \"600px\", margin: \"auto\", fontFamily: \"Arial, sans-serif\" }}>\n            <h2>AI Chatbot</h2>\n            <div\n                style={{\n                    border: \"1px solid #ccc\",\n                    borderRadius: \"8px\",\n                    padding: \"15px\",\n                    height: \"400px\",\n                    overflowY: \"auto\",\n                    marginBottom: \"20px\",\n                }}\n            >\n                {messages.map((message, index) => (\n                    <div\n                        key={index}\n                        style={{\n                            marginBottom: \"10px\",\n                            textAlign: message.sender === \"User\" ? \"right\" : \"left\",\n                        }}\n                    >\n                        <strong>{message.sender}:</strong> {message.text}\n                    </div>\n                ))}\n            </div>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Type your message\"\n                    style={{\n                        flex: \"1\",\n                        padding: \"10px\",\n                        borderRadius: \"4px\",\n                        border: \"1px solid #ccc\",\n                        marginRight: \"10px\",\n                    }}\n                />\n                <button onClick={handleSend} style={{ padding: \"10px 20px\" }}>\n                    Send\n                </button>\n                <button\n                    onClick={startListening}\n                    style={{\n                        padding: \"10px\",\n                        marginLeft: \"10px\",\n                        backgroundColor: listening ? \"lightcoral\" : \"lightblue\",\n                    }}\n                >\n                    🎤 {listening ? \"Listening...\" : \"Voice\"}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}